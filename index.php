<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MentalEscaper | –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å</title>
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700&family=Comfortaa:wght@500&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/CSS/styles.css">
</head>

<!-- –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–∞—Ç–µ–≥–∏ –∏ —Å—Ç–∏–ª–∏ -->
<style>
        /* –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è */
        :root {
            --pink: #FF9FDB;
            --purple: #A68EFF;
            --lavender: #E8D7FF;
            --text-dark: #2D2A4E;
            --radius-xl: 40px;
            --radius-md: 28px;
            --gradient: linear-gradient(135deg, var(--purple) 0%, var(--pink) 100%);
        }

        /* –°—Ç–∏–ª–∏ –¥–ª—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */
        .registration-block {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(12px);
            border-radius: var(--radius-xl);
            padding: 4rem;
            margin: 4rem auto;
            max-width: 600px;
            box-shadow: 0 25px 50px -12px rgba(124, 115, 255, 0.15);
            position: relative;
            overflow: hidden;
        }

        .registration-block::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -30%;
            width: 600px;
            height: 600px;
            background: var(--gradient);
            border-radius: 50%;
            opacity: 0.08;
            z-index: 0;
        }

        .registration-title {
            font-size: 2.5rem;
            color: var(--text-dark);
            margin-bottom: 2rem;
            text-align: center;
            font-family: 'Comfortaa', cursive;
        }

        .input-group {
            position: relative;
            margin-bottom: 2rem;
        }

        .input-group input {
            width: 100%;
            padding: 1.2rem;
            border: 2px solid rgba(124, 115, 255, 0.1);
            border-radius: var(--radius-md);
            background: rgba(249, 246, 255, 0.9);
            font-size: 1.1rem;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .input-group label {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--dark);
            pointer-events: none;
            transition: all 0.3s;
        }

        .input-group input:focus,
        .input-group input:valid {
            border-color: var(--primary);
            box-shadow: 0 4px 15px rgba(124, 115, 255, 0.2);
        }

        .input-group input:focus + label,
        .input-group input:valid + label {
            top: -10px;
            left: 0.5rem;
            font-size: 0.9rem;
            color: var(--primary);
        }

        .btn-register {
            position: relative;
            width: 100%;
            padding: 1.2rem;
            border: none;
            border-radius: 60px;
            background: var(--gradient);
            color: white;
            font-weight: 700;
            cursor: pointer;
            overflow: hidden;
            transition: transform 0.3s;
        }

        .btn-register:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(124, 115, 255, 0.3);
        }

        .auth-links {
            margin-top: 2rem;
            text-align: center;
        }

        .auth-link {
            display: block;
            color: var(--dark);
            text-decoration: none;
            margin: 0.5rem 0;
            transition: color 0.3s;
        }

        .auth-link:hover {
            color: var(--primary);
        }

        @media (max-width: 768px) {
            .registration-block {
                padding: 2rem;
                margin: 2rem;
            }

            .registration-title {
                font-size: 2rem;
            }

            .input-group input {
                padding: 1rem;
            }
        }


        /* –ë–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –ò–ò - –ø–æ–ª–Ω—ã–π —Ä–µ–¥–∏–∑–∞–π–Ω */
        .analysis-block {
            display: grid;
            grid-template-columns: 1.2fr 1fr;
            gap: 4rem;
            background: var(--lavender);
            border-radius: var(--radius-xl);
            padding: 4rem;
            margin: 4rem auto;
            position: relative;
            overflow: hidden;
            box-shadow: 0 25px 50px -12px rgba(124, 115, 255, 0.25);
        }

        .analysis-block::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -30%;
            width: 600px;
            height: 600px;
            background: var(--gradient);
            border-radius: 50%;
            opacity: 0.1;
            z-index: 0;
        }

        .analysis-input {
            position: relative;
            z-index: 1;
            display: flex;
            flex-direction: column;
            gap: 2rem;
        }

        .analysis-textarea {
            width: 100%;
            height: 250px;
            padding: 2rem;
            border: 3px solid rgba(255, 255, 255, 0.5);
            border-radius: var(--radius-md);
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(8px);
            font-size: 1.1rem;
            color: var(--text-dark);
            transition: all 0.3s;
            box-shadow: 0 8px 32px rgba(166, 142, 255, 0.1);
        }

        .analysis-textarea:focus {
            border-color: var(--pink);
            background: rgba(255, 255, 255, 1);
            box-shadow: 0 12px 40px rgba(255, 159, 219, 0.2);
        }

        .analysis-output {
            position: relative;
            min-height: 400px;
            padding: 2.5rem;
            background: rgba(255, 255, 255, 0.95);
            border-radius: var(--radius-md);
            backdrop-filter: blur(12px);
            border: 2px solid rgba(255, 255, 255, 0.3);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.05);
        }

        .ai-response {
            font-size: 1.1rem;
            line-height: 1.8;
            color: var(--text-dark);
            position: relative;
        }

        .ai-response::after {
            content: 'üíñ';
            position: absolute;
            bottom: -2rem;
            right: 0;
            font-size: 2rem;
            opacity: 0.3;
        }

        /* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ */
        .analyze-btn {
            position: relative;
            overflow: hidden;
            border: none;
            padding: 1.5rem 3rem;
            border-radius: 60px;
            background: var(--gradient);
            color: white;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.23, 1, 0.32, 1);
            box-shadow: 0 15px 30px rgba(166, 142, 255, 0.4);
        }

        .analyze-btn:hover {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 25px 50px rgba(166, 142, 255, 0.3);
        }

        .analyze-btn::after {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg,
                transparent 25%,
                rgba(255, 255, 255, 0.1) 50%,
                transparent 75%);
            transform: rotate(30deg);
            animation: shine 3s infinite;
        }

        @keyframes shine {
            0% { transform: translateX(-100%) rotate(30deg); }
            100% { transform: translateX(100%) rotate(30deg); }
        }

        .error-message {
  color: #dc3545;
  background: #ffe6e6;
  border: 1px solid #ffcccc;
  padding: 1rem;
  border-radius: var(--radius-md);
  margin-top: 1rem;
  display: none;
}

.dynamic-image {
  width: 100%;
  border-radius: var(--radius-md);
  margin-top: 2rem;
  display: none;
}

.ai-response {
  display: none;
}

.affirmations-block {
display: grid;
grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
gap: 2rem;
padding: 4rem 2rem;
position: relative;
}

.affirmation-card {
position: relative;
min-height: 400px;
border-radius: var(--radius-xl);
overflow: hidden;
background-size: cover;
background-position: center;
transform: translateY(0);
transition: all 0.6s cubic-bezier(0.23, 1, 0.32, 1);
box-shadow: 0 15px 35px rgba(0,0,0,0.1);
}

.affirmation-card::before {
content: '';
position: absolute;
top: 0;
left: 0;
width: 100%;
height: 100%;
background: linear-gradient(45deg,
  rgba(44,42,78,0.9) 0%,
  rgba(166,142,255,0.4) 100%);
z-index: 1;
}

.affirmation-card:hover {
transform: translateY(-10px);
box-shadow: 0 25px 50px rgba(124,115,255,0.15);
}

.affirmation-content {
position: relative;
z-index: 2;
padding: 2rem;
color: white;
height: 100%;
display: flex;
flex-direction: column;
justify-content: flex-end;
}

.affirmation-content h3 {
font-size: 2.2rem;
margin-bottom: 1.5rem;
text-shadow: 0 2px 10px rgba(0,0,0,0.3);
}

.affirmation-text p {
font-size: 1.2rem;
line-height: 1.6;
opacity: 0.9;
margin-bottom: 2rem;
position: relative;
z-index: 2;
}

.floating-text {
position: absolute;
font-size: 6rem;
font-weight: 700;
opacity: 0.08;
animation: float 25s infinite linear;
pointer-events: none;
z-index: 0;
}

@keyframes float {
0% { transform: translate(-50%, -50%) rotate(-15deg); }
50% { transform: translate(50%, 50%) rotate(15deg); }
100% { transform: translate(-50%, -50%) rotate(-15deg); }
}

.voice-icon {
position: absolute;
top: 2rem;
right: 2rem;
width: 60px;
height: 60px;
background: rgba(255,255,255,0.95);
border-radius: 50%;
display: flex;
align-items: center;
justify-content: center;
transition: all 0.3s;
z-index: 3;
backdrop-filter: blur(5px);
}

.voice-icon i {
color: var(--primary);
font-size: 1.6rem;
margin-left: 5px;
transition: transform 0.3s;
}

.voice-icon:hover {
transform: scale(1.1);
box-shadow: 0 5px 15px rgba(124,115,255,0.3);
}

@media (max-width: 768px) {
.affirmations-block {
  padding: 2rem 1rem;
  grid-template-columns: 1fr;
}

.affirmation-card {
  min-height: 300px;
}

.affirmation-content h3 {
  font-size: 1.8rem;
}

.floating-text {
  font-size: 4rem;
}
}

        /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
        @media (max-width: 1024px) {
            .analysis-block {
                grid-template-columns: 1fr;
                padding: 2.5rem;
                margin: 2rem auto;
            }

            .affirmations-block {
                padding: 2rem;
                grid-template-columns: 1fr;
            }

            .analysis-textarea {
                height: 180px;
            }
        }

        @media (max-width: 480px) {
            .analysis-block,
            .affirmations-block {
                border-radius: var(--radius-md);
                padding: 1.5rem;
            }

            .analyze-btn {
                width: 100%;
                padding: 1.2rem;
            }
        }
    </style>

<body>
    <header>
        <nav class="navbar">
            <a href="/" class="logo">
                <img src="img/–ª–æ–≥–æ1.png" alt="–õ–æ–≥–æ">
                MentalEscaper
            </a>

            <div class="nav-links">
                <a href="/">–ì–ª–∞–≤–Ω–∞—è</a>
                <a href="/test.php">–ê–Ω–∞–ª–∏–∑</a>
                <a href="/advice.php">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</a>
                <a href="/affirmations">–ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏</a>
                <a href="/breathing">–ú–µ–¥–∏—Ç–∞—Ü–∏—è</a>
            </div>

            <div class="auth-buttons">
                <button class="btn">–í–æ–π—Ç–∏</button>
            </div>

            <div class="burger">
                <div class="burger-line"></div>
                <div class="burger-line"></div>
                <div class="burger-line"></div>
            </div>
        </nav>
    </header>

    <section class="hero">
        <div class="hero-content">
            <h1>–í–∞—à –ø—É—Ç—å –∫ –≥–∞—Ä–º–æ–Ω–∏–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å</h1>
            <p>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –º–µ—Ç–æ–¥–æ–≤ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–π —Ç–µ—Ä–∞–ø–∏–∏</p>
            <button class="btn btn-hero">–ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç</button>
        </div>
        <div class="hero-image">
            <div class="slider-container">
                <div class="slider-track">
                    <div class="slider-item active">
                        <img src="img/hero_photo.jpg" alt="–ú–µ–¥–∏—Ç–∞—Ü–∏—è">
                    </div>
                    <div class="slider-item">
                        <img src="img/hero_photo2.jpg" alt="–ô–æ–≥–∞">
                    </div>
                    <div class="slider-item">
                        <img src="img/hero_photo3.jpg" alt="–¢–µ—Ä–∞–ø–∏—è">
                    </div>
                </div>
                <div class="slider-dots"></div>
            </div>
        </div>
    </section>

    <!-- –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å–µ–∫—Ü–∏—é –ø–æ—Å–ª–µ –±–ª–æ–∫–∞ hero -->
<section class="section" id="registration">
    <div class="registration-block">
        <div class="registration-content">
            <h2 class="registration-title">–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ –≥–∞—Ä–º–æ–Ω–∏–∏</h2>

            <form class="registration-form" id="regForm">
                <div class="input-group">
                    <input type="text" id="fullname" required>
                    <label for="fullname">–§–ò–û</label>
                    <div class="input-border"></div>
                </div>

                <div class="input-group">
                    <input type="email" id="email" required>
                    <label for="email">–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞</label>
                    <div class="input-border"></div>
                </div>

                <div class="input-group">
                    <input type="password" id="password" required>
                    <label for="password">–ü–∞—Ä–æ–ª—å</label>
                    <div class="input-border"></div>
                </div>

                <button type="submit" class="btn-register">
                    <span class="btn-text">–í–æ–π—Ç–∏</span>
                    <div class="btn-gradient"></div>
                </button>
            </form>

            <div class="auth-links">
                <a href="#recover" class="auth-link">–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?</a>
                <a href="#login" class="auth-link">–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?</a>
            </div>
        </div>
    </div>
</section>

    <!-- –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ -->
    <section class="section" id="analysis">
        <div class="analysis-block">
            <div class="analysis-input">
                <h2 style="font-size: 2.5rem; color: var(--text-dark); margin-bottom: 1rem;">
                    üí¨ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                </h2>
                <p style="color: #5A5773; margin-bottom: 2rem;">
                    –ù–∞—à –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ —ç–º–æ—Ü–∏–∏ –∏ –¥–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                </p>
                <textarea
                    class="analysis-textarea"
                    id="userInput"
                    placeholder="–ü—Ä–∏–º–µ—Ä: –°–µ–≥–æ–¥–Ω—è —è —á—É–≤—Å—Ç–≤—É—é —Ç—Ä–µ–≤–æ–≥—É –∏–∑-–∑–∞ —Ä–∞–±–æ—Ç—ã..."
                    spellcheck="false"
                ></textarea>
                <button class="analyze-btn" id="analyzeBtn">
                    –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                </button>
            </div>
            <div class="ai-response" id="aiResponse">
                <div class="loader" id="loader"></div>
                <div id="responseContent"></div>
                <div id="errorMessage" class="error-message"></div>
                <img src="https://images.unsplash.com/photo-1617791160536-598cf32026fb?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80"
                     alt="–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å"
                     class="dynamic-image">
            </div>
        </div>
    </section>

    <section class="section" id="affirmations">
    <div class="affirmations-block">
        <!-- –ö–∞—Ä—Ç–æ—á–∫–∞ 1 -->
        <div class="affirmation-card"
            style="background-image: url('https://images.unsplash.com/photo-1506126613408-eca07ce68773?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80')">
            <div class="particles-overlay"></div>
            <div class="voice-icon">
                <i class="fas fa-play"></i>
            </div>
            <div class="affirmation-content">
                <h3>–Ø –Ω–∞–ø–æ–ª–Ω–µ–Ω —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ–º</h3>
                <div class="affirmation-text">
                    <p>–ö–∞–∫ –æ–∫–µ–∞–Ω –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–≤–æ–∑–º—É—Ç–∏–º—ã–º –ø–æ–¥ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å—é –≤–æ–ª–Ω, —Ç–∞–∫ –∏ –º–æ–π —Ä–∞–∑—É–º —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∏—Ä –≤–Ω—É—Ç—Ä–∏</p>
                    <div class="floating-text">–≥–∞—Ä–º–æ–Ω–∏—è</div>
                </div>
            </div>
        </div>

        <!-- –ö–∞—Ä—Ç–æ—á–∫–∞ 2 -->
        <div class="affirmation-card"
            style="background-image: url('https://images.unsplash.com/photo-1490730141103-6cac27aaab94?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80')">
            <div class="particles-overlay"></div>
            <div class="voice-icon">
                <i class="fas fa-play"></i>
            </div>
            <div class="affirmation-content">
                <h3>–Ø –¥–æ—Å—Ç–æ–∏–Ω –ª—É—á—à–µ–≥–æ</h3>
                <div class="affirmation-text">
                    <p>–ú–æ—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–∞, –∫–∞–∫ –∑–≤–µ–∑–¥–Ω–æ–µ –Ω–µ–±–æ. –Ø –ø—Ä–∏–Ω–∏–º–∞—é –ª—é–±–æ–≤—å –∏ –∏–∑–æ–±–∏–ª–∏–µ –≤—Å–µ–ª–µ–Ω–Ω–æ–π</p>
                    <div class="floating-text">—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                </div>
            </div>
        </div>

        <!-- –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∫–∞—Ä—Ç–æ—á–µ–∫ -->
    </div>
</section>



    <canvas id="particles-canvas"></canvas>
    <script src="/scripts.js"></script>



<script>
        // –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–π
        function speakText(text) {
            const synth = window.speechSynthesis;
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'ru-RU';
            utterance.pitch = 0.9;
            utterance.rate = 1.1;
            synth.speak(utterance);
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–π
        document.querySelectorAll('.affirmation-card').forEach(card => {
            card.addEventListener('click', () => {
                const text = card.querySelector('h3').textContent;
                speakText(text);
            });
        });
    </script>

    <script>
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
    document.querySelectorAll('.analyze-btn').forEach(btn => {
        btn.addEventListener('mousemove', e => {
            const x = e.pageX - btn.offsetLeft;
            const y = e.pageY - btn.offsetTop;
            btn.style.setProperty('--x', x + 'px');
            btn.style.setProperty('--y', y + 'px');
        });
    });

    // –ü–∞—Ä–∞–ª–ª–∞–∫—Å-—ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
    document.querySelectorAll('.affirmation-card').forEach(card => {
        card.addEventListener('mousemove', e => {
            const rect = card.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            card.style.transform = `perspective(1000px) rotateX(${(y - rect.height/2)/20}deg) rotateY(${-(x - rect.width/2)/20}deg)`;
        });

        card.addEventListener('mouseleave', () => {
            card.style.transform = 'perspective(1000px) rotateX(0) rotateY(0)';
        });
    });

    // –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≤–∞—à scripts.js
</script>

<script>
// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
document.getElementById('regForm').addEventListener('submit', function(e) {
    e.preventDefault();

    const inputs = Array.from(this.elements).filter(el => el.tagName === 'INPUT');
    let isValid = true;

    inputs.forEach(input => {
        if (!input.checkValidity()) {
            input.parentElement.classList.add('invalid');
            isValid = false;
        } else {
            input.parentElement.classList.remove('invalid');
        }
    });

    if (isValid) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
        console.log('–§–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ');
    }
});

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
document.querySelectorAll('input').forEach(input => {
    input.addEventListener('input', () => {
        if (input.checkValidity()) {
            input.parentElement.classList.remove('invalid');
        }
    });
});
</script>

<script>
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI
    const OPENAI_CONFIG = {
        MODEL: "gpt-3.5-turbo",
        MAX_TOKENS: 500
    };

    const UI_ELEMENTS = {
        userInput: document.getElementById('userInput'),
        analyzeBtn: document.getElementById('analyzeBtn'),
        responseContent: document.getElementById('responseContent'),
        errorMessage: document.getElementById('errorMessage'),
        loader: document.getElementById('loader')
    };

    // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    async function handleAnalysisRequest() {
        const userText = UI_ELEMENTS.userInput.value.trim();

        if (!userText) {
            showError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é.");
            return;
        }

        try {
            toggleLoader(true);
            clearMessages();

            // –î–ª—è —Ç–µ—Å—Ç–∞ –±–µ–∑ API –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ mockOpenAIResponse()
            const responseData = await fetchOpenAIResponse(userText);
            displayResponse(responseData);

        } catch (error) {
            handleApiError(error);
        } finally {
            toggleLoader(false);
        }
    }

    // –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ OpenAI API
    async function fetchOpenAIResponse(userText) {
        const response = await fetch(OPENAI_CONFIG.ENDPOINT, {
            method: 'POST',
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${OPENAI_CONFIG.API_KEY}`
            },
            body: JSON.stringify({
                model: OPENAI_CONFIG.MODEL,
                messages: [{
                    role: "user",
                    content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${userText}.
                             –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 1) –ê–Ω–∞–ª–∏–∑; 2) –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏; 3) –¶–∏—Ç–∞—Ç–∞`
                }],
                max_tokens: OPENAI_CONFIG.MAX_TOKENS
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error?.message || `–û—à–∏–±–∫–∞ ${response.status}`);
        }

        return response.json();
    }

    // –ú–æ–∫-–æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ API
    function mockOpenAIResponse() {
        return {
            choices: [{
                message: {
                    content: `1) –í—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ —É–º–µ—Ä–µ–Ω–Ω—É—é —Ç—Ä–µ–≤–æ–≥—É\n2) –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n3) "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑–Ω—É—Ç—Ä–∏" - –î–∞–ª–∞–π-–ª–∞–º–∞`
                }
            }]
        };
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    function handleApiError(error) {
        const errorMessages = {
            401: "–ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á",
            429: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤",
            default: `–û—à–∏–±–∫–∞: ${error.message}`
        };

        showError(errorMessages[error.message.split(' ').pop()] || errorMessages.default);
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function toggleLoader(show) {
        UI_ELEMENTS.loader.style.display = show ? 'block' : 'none';
    }

    function clearMessages() {
        UI_ELEMENTS.responseContent.textContent = '';
        UI_ELEMENTS.errorMessage.textContent = '';
    }

    function displayResponse(data) {
        UI_ELEMENTS.responseContent.innerHTML = data.choices[0].message.content;
    }

    function showError(message) {
        UI_ELEMENTS.errorMessage.textContent = message;
        UI_ELEMENTS.errorMessage.style.display = 'block';
    }

    UI_ELEMENTS.analyzeBtn.addEventListener('click', handleAnalysisRequest);
</script>


</body>
</html>
